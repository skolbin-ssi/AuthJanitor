@page "/integrityReports"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="System"
                                             PageGroup="Integrity Reports" />

    <Row>
        <Column Padding="Padding.Is0">
            <BlazorTable.Table TableItem="IntegrityReport"
                               TableClass="table table-striped table-bordered"
                               @bind-Items="@IntegrityReportList">

                <BlazorTable.Column TableItem="IntegrityReport"
                                    Title="Library File" Field="@(x => x.LibraryFile)"
                                    Sortable="true" Filterable="true">
                    <Template>
                        <span title="@context.LibraryFile">@System.IO.Path.GetFileName(context.LibraryFile)</span>
                    </Template>
                </BlazorTable.Column>

                <BlazorTable.Column TableItem="IntegrityReport"
                                    Title="Library File Hash" Field="@(x => x.LibraryFileHash)" />

                <BlazorTable.Column TableItem="IntegrityReport"
                                    Title="Signature" Field="@(x => x.SignatureCheckResult)"
                                    Sortable="true" Filterable="true">
                    <Template>
                        @context.SignatureCheckResult
                        @if (context.SignatureCheckResult != IntegrityReport.IntegritySignatureCheckResult.NoSignature)
                        {
                            @foreach (var signature in context.Signatures)
                            {
                                <ListGroup Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">
                                    <ListGroupItem>
                                        <strong>Friendly Name</strong> @signature.FriendlyName
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Issuer</strong> @signature.Issuer
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Not Before</strong> @signature.NotBefore
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Not After</strong> @signature.NotAfter
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Subject</strong> @signature.Subject
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Version</strong> @signature.Version
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Thumbprint</strong> @signature.Thumbprint
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Publisher Description</strong> @signature.PublisherDescription
                                    </ListGroupItem>
                                    <ListGroupItem>
                                        <strong>Publisher URL</strong> @signature.PublisherUrl
                                    </ListGroupItem>
                                </ListGroup>
                            }
                        }
                    </Template>
                </BlazorTable.Column>

                <BlazorTable.Column TableItem="IntegrityReport"
                                    Title="AuthJanitor Types" Field="@(x => x.AuthJanitorTypes)">
                    <Template>
                        <ListGroup Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">
                            @foreach (var ajType in context.AuthJanitorTypes)
                            {
                                <ListGroupItem Padding="Padding.Is2.OnAll">
                                    @{
                                        string iconName = FontAwesomeIcons.Box;
                                        switch (ajType.ExtensibilityType)
                                        {
                                            case AuthJanitor.Integrity.IntegrityReportExtensibilityType.ExtensibilityTypes.CryptographicImplementation:
                                                iconName = FontAwesomeIcons.Lock;
                                                break;
                                            case AuthJanitor.Integrity.IntegrityReportExtensibilityType.ExtensibilityTypes.EventSink:
                                                iconName = FontAwesomeIcons.Bell;
                                                break;
                                            case AuthJanitor.Integrity.IntegrityReportExtensibilityType.ExtensibilityTypes.Identity:
                                                iconName = FontAwesomeIcons.UserCheck;
                                                break;
                                            case AuthJanitor.Integrity.IntegrityReportExtensibilityType.ExtensibilityTypes.Provider:
                                                iconName = FontAwesomeIcons.Cogs;
                                                break;
                                            case AuthJanitor.Integrity.IntegrityReportExtensibilityType.ExtensibilityTypes.SecureStorage:
                                                iconName = FontAwesomeIcons.UserSecret;
                                                break;
                                        }
                                        <Icon Name="@iconName" Float="Float.Left" Margin="Margin.Is2.FromRight" />
                                        <Heading Size="HeadingSize.Is6" Float="Float.Left" Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">@ajType.TypeName</Heading>
                                        <div class="clearfix"></div>
                                    }
                                </ListGroupItem>
                            }
                        </ListGroup>
                    </Template>
                </BlazorTable.Column>

                <!-- Pager -->
                <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
            </BlazorTable.Table>
        </Column>
    </Row>

    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Integrity Reports"
                                                    Icon="@FontAwesomeIcons.ClipboardCheck"
                                                    @bind-Visible="@ContextualHelpVisible">
        <p>
            Since AuthJanitor runs your key/secret management infrastructure, it's important to know that AuthJanitor itself is
            secure. In order to accomplish this, several metrics are collected about all of the libraries loaded into the
            environment. SHA hashes of each library are provided and any libraries which support Authenticode signatures can
            have their certificate chains validated and checked against active revocation lists.
        </p>
        <p>
            If you don't quite understand this screen, <u>that's fine</u>; it's not necessary to run AuthJanitor. But if you're very
            aware of your infrastructure security posture, it might be worth beginning to track these values to make sure an
            attacker can't modify AuthJanitor surreptitiously.
        </p>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<SystemWideFooter RefreshDataClicked="@(() => LoadData())" 
                  @bind-ContextualHelpVisible="@ContextualHelpVisible"/>

@using AuthJanitor.Integrity
@code {
    protected IEnumerable<IntegrityReport> IntegrityReportList { get; set; } = new List<IntegrityReport>();
    protected bool ContextualHelpVisible { get; set; }

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData()
    {
        IntegrityReportList = Newtonsoft.Json.JsonConvert.DeserializeObject<IEnumerable<IntegrityReport>>(
            await (await Http.GetAsync("api/system/integrityReports")).Content.ReadAsStringAsync());
    }
}