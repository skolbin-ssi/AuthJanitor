@page "/resources/{ResourceId}"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="Manage"
                                             PageGroup="Resources"
                                             PageGroupLink="/resources"
                                             OptionalObjectName="@Resource.Name" />

    <Row Class="border-bottom">
        @if (_provider != null)
        {
        <Column Class="bg-light" Margin="Margin.IsAuto.OnY" ColumnSize="ColumnSize.Is1">
            <div class="providerImage my-2 mx-auto">@((MarkupString)_provider.Details.SvgImage)</div>
            <div class="d-none d-sm-block text-center border-top py-2 small">@_provider.Details.Name</div>
        </Column>
        }
        <Column Padding="Padding.Is3" Class="bg-light" ColumnSize="ColumnSize.Is11">
            <DisplayHeading Size="DisplayHeadingSize.Is4">@Resource.Name</DisplayHeading>
            <Paragraph Margin="Margin.Is2.OnY" Class="lead">@Resource.Description</Paragraph>
        </Column>
    </Row>

    <Row Class="border-bottom">
        <Column Padding="Padding.Is2">
            <Paragraph>@Resource.RuntimeDescription</Paragraph>
        </Column>
    </Row>

    <Row Padding="Padding.Is3.OnY" Class="bg-light shadow-sm">
        <Column ColumnSize="ColumnSize.Is4" Class="text-center">
            <AuthJanitor.UI.Components.ConfigurationTestButton Context="TestAsContexts.AsUser"
                                                               ProviderType="@Resource.ProviderType"
                                                               ProviderConfiguration="@Resource.ProviderConfiguration" />
        </Column>
        <Column ColumnSize="ColumnSize.Is4" Class="text-center">
            <AuthJanitor.UI.Components.ConfigurationTestButton Context="TestAsContexts.AsApp"
                                                               ProviderType="@Resource.ProviderType"
                                                               ProviderConfiguration="@Resource.ProviderConfiguration" />
        </Column>
        <Column ColumnSize="ColumnSize.Is4" Class="text-center">
            <Button Color="Color.Danger" Clicked="@(() => { DeleteModalShowing = true; })">
                <Icon Name="FontAwesomeIcons.Trash" Margin="Margin.Is3.FromRight" />
                Delete Resource
            </Button>
        </Column>
    </Row>

    @if (Resource.Risks.Any())
    {
        <Row Margin="Margin.Is2.FromTop" Padding="Padding.Is2.FromBottom" Class="shadow-sm">
            <Container Fluid="true">
                <Row Padding="Padding.Is0" Margin="Margin.Is1" Class="border-bottom">
                    <Column ColumnSize="ColumnSize.Is1" Margin="Margin.IsAuto.OnY"></Column>
                    <Column ColumnSize="ColumnSize.Is3" Margin="Margin.IsAuto.OnY"><strong>Risk</strong></Column>
                    <Column ColumnSize="ColumnSize.Is8" Margin="Margin.IsAuto.OnY"><strong>Remediation</strong></Column>
                </Row>

                @foreach (var risk in Resource.Risks)
                {
                    <Row>
                        <Column ColumnSize="ColumnSize.Is1" Margin="Margin.IsAuto.OnY">
                            <Heading Size="HeadingSize.Is5">
                                <Badge Color="Color.Warning">
                                    <span><Icon Name="FontAwesomeIcons.ExclamationCircle" Class="text-white" Margin="Margin.Is1.FromRight" /></span>
                                    @risk.Score
                                </Badge>
                            </Heading>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is3" Margin="Margin.IsAuto.OnY">
                            <Heading Size="HeadingSize.Is6">
                                @risk.Risk
                            </Heading>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is8" Margin="Margin.IsAuto.OnY">
                            <Paragraph>@risk.Recommendation</Paragraph>
                        </Column>
                    </Row>
                }

            </Container>
        </Row>
    }

    <Row Padding="Padding.Is0.FromTop" Margin="Margin.Is0.FromTop">
        <Column Padding="Padding.Is0.OnX">
            <AuthJanitor.UI.Components.ConfigurationVisualizer ShowEditControls="false"
                                                               Value="@Resource.ProviderConfiguration" />
        </Column>
    </Row>

    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Resources"
                                                    Icon="@FontAwesomeIcons.Database"
                                                    @bind-Visible="@ContextualHelpVisible">
        <Paragraph>
            <strong>Resources</strong> describe the configuration required to access a given service or object for the purposes
            of either delivering key/secret material or rekeying that object or service. A <strong>Resource</strong> is made up
            of a <strong>Provider</strong> and a corresponding <strong>Provider Configuration</strong>, which is a structure
            defined by the <strong>Provider</strong> library.
        </Paragraph>
    </AuthJanitor.UI.Components.HelpSlideInComponent>

</Container>

<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@Resource.ObjectId"
                         ObjectName="@Resource.Name"
                         ResultClicked="@DeleteConfirmCallback" />

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible"/>

@using AuthJanitor.UI.Shared.ViewModels
@code {
    [Parameter]
    public string ResourceId { get; set; }

    protected bool DeleteModalShowing { get; set; }
    protected bool ContextualHelpVisible { get; set; }

    public ResourceViewModel Resource { get; set; } = new ResourceViewModel();
    protected LoadedProviderViewModel _provider;

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData()
    {
        Resource = await Http.AJGet<ResourceViewModel>(Guid.Parse(ResourceId));
        var providers = await Http.AJList<LoadedProviderViewModel>();
        _provider = providers.First(p => p.ProviderTypeName == Resource.ProviderType);
        Resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(Resource.ProviderType);
        Resource.ProviderConfiguration.SerializedConfiguration = Resource.SerializedProviderConfiguration;
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<ResourceViewModel>(Resource.ObjectId);
            await LoadData();
        }
        DeleteModalShowing = false;
    }
}