@page "/accessManagement"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="System"
                                                PageGroup="Access Management">
        <Column ColumnSize="ColumnSize.Is3" Margin="Margin.IsAuto.OnY" Padding="Padding.Is3.FromRight" Class="text-right">
            <Button Clicked="@(() => { CreateModalShowing = true; })">
                <Icon Name="@FontAwesomeIcons.Plus" Style="margin-right:-0.70em" />
                <Icon Name="@FontAwesomeIcons.User" Margin="Margin.Is1.FromRight" />
                Add New User
            </Button>
        </Column>
    </AuthJanitor.UI.Components.BreadcrumbRow>

    <Row>
        <Column Padding="Padding.Is0">
            <BlazorTable.Table TableItem="AuthJanitorAuthorizedUserViewModel"
                                TableClass="table table-striped table-bordered"
                                @bind-Items="@Users">

                <!-- Controls -->
                <BlazorTable.Column TableItem="AuthJanitorAuthorizedUserViewModel"
                                    Title="" Field="@(x => x.UPN)"
                                    Width="1%"
                                    Sortable="false" Filterable="false">
                    <Template>
                        <Blazorise.Buttons Role="ButtonsRole.Toolbar">
                            <Blazorise.Button Color="Color.Danger" Clicked="@(() => { SelectedValue = context; DeleteRoleModalShowing = true; })">
                                <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                            </Blazorise.Button>
                        </Blazorise.Buttons>
                    </Template>
                </BlazorTable.Column>

                <!-- User Display Name -->
                <BlazorTable.Column TableItem="AuthJanitorAuthorizedUserViewModel"
                                    Title="User Display Name" Field="@(x => x.DisplayName)"
                                    Sortable="true" Filterable="true">
                    <Template>
                        <Paragraph>@context.DisplayName</Paragraph>
                    </Template>
                </BlazorTable.Column>

                <!-- UPN -->
                <BlazorTable.Column TableItem="AuthJanitorAuthorizedUserViewModel"
                                    Title="UPN" Field="@(x => x.UPN)"
                                    Sortable="true" Filterable="true">
                    <Template>
                        <Paragraph>@context.UPN</Paragraph>
                    </Template>
                </BlazorTable.Column>

                <!-- Role -->
                <BlazorTable.Column TableItem="AuthJanitorAuthorizedUserViewModel"
                                    Title="Role" Field="@(x => x.RoleValue)"
                                    Sortable="true" Filterable="true">
                    <Template>
                        <Paragraph>@context.RoleValue</Paragraph>
                    </Template>
                </BlazorTable.Column>

                <!-- Pager -->
                <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
            </BlazorTable.Table>
        </Column>
    </Row>

    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Access Management"
                                                    Icon="@FontAwesomeIcons.UserCheck"
                                                    @bind-Visible="@ContextualHelpVisible">
        <Paragraph>
            The <strong>Access Management</strong> tool allows administrators with management access to the identity service being
            leveraged to add, remove, and list users who have access to the AuthJanitor tool at various permissions levels.
        </Paragraph>
        <Paragraph>
            A user may have multiple roles assigned to them, but when using <strong>Global Administrator</strong>, all system
            rights are implicitly granted.
        </Paragraph>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<DataModal @bind-Visible="@CreateModalShowing"
            Title="Add New User"
            YesButton="Add"
            NoButton="Cancel"
            ResultClicked="@CreateCallback">
    <AuthorizedUserEditor @bind-Value="@SelectedValue" />
</DataModal>
<DeleteConfirmationModal @bind-Visible="@DeleteRoleModalShowing"
                            ObjectId="@Guid.Empty"
                            ObjectName="@($"{SelectedValue.RoleValue} on {SelectedValue.DisplayName}")"
                            ResultClicked="@DeleteRoleConfirmCallback" />
<DeleteConfirmationModal @bind-Visible="@DeleteUserModalShowing"
                         ObjectId="@Guid.Empty"
                         ObjectName="@($"{SelectedValue.DisplayName} ({SelectedValue.UPN})")"
                         ResultClicked="@DeleteUserConfirmCallback" />

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible" />

@using Newtonsoft.Json
@code {
    protected IEnumerable<AuthJanitorAuthorizedUserViewModel> Users { get; set; } = new List<AuthJanitorAuthorizedUserViewModel>();

    protected bool CreateModalShowing { get; set; }
    protected bool DeleteRoleModalShowing { get; set; }
    protected bool DeleteUserModalShowing { get; set; }
    protected bool ContextualHelpVisible { get; set; }

    [Parameter]
    public AuthJanitorAuthorizedUserViewModel SelectedValue { get; set; } = new AuthJanitorAuthorizedUserViewModel();

    [Parameter]
    public EventCallback<AuthJanitorAuthorizedUserViewModel> SelectedValueChanged { get; set; }

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData()
    {
        Users = await Http.AJList<AuthJanitorAuthorizedUserViewModel>();
    }

    protected void CreateNew()
    {
        SelectedValue = new AuthJanitorAuthorizedUserViewModel();
        CreateModalShowing = true;
    }

    protected async Task CreateCallback(bool result)
    {
        if (result)
        {
            await Http.AJCreate<AuthJanitorAuthorizedUserViewModel>(SelectedValue);
            await LoadData();
        }
        CreateModalShowing = false;
    }

    protected async Task DeleteRoleConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.PostAsync($"/api/access/removeRole", new StringContent(JsonConvert.SerializeObject(SelectedValue)));
            await LoadData();
        }
        DeleteRoleModalShowing = false;
    }

    protected async Task DeleteUserConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.PostAsync($"/api/access/removeUser", new StringContent(JsonConvert.SerializeObject(SelectedValue)));
            await LoadData();
        }
        DeleteUserModalShowing = false;
    }
}
