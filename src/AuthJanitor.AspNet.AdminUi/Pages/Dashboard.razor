@page "/"
@page "/dashboard"
@using AuthJanitor.UI.Components

<Container Fluid="true" Style="position:relative;">
    <Row Margin="Margin.Is4.OnY.Is2.OnX">
        <Column ColumnSize="ColumnSize.Is12.Is6.OnDesktop.Is3.OnWidescreen" Margin="Margin.Is1.OnY">
            <DashboardInformationCard BgColor="bg-warning"
                                      Heading="Expiring Soon"
                                      Icon="@FontAwesomeIcons.Calendar"
                                      Data="@Metrics.ExpiringSoon.Count().ToString()" />
        </Column>
        <Column ColumnSize="ColumnSize.Is12.Is6.OnDesktop.Is3.OnWidescreen" Margin="Margin.Is1.OnY">
            <DashboardInformationCard BgColor="bg-danger"
                                      Heading="Expired"
                                      Icon="@FontAwesomeIcons.CalendarTimes"
                                      Data="@Metrics.TotalExpired.ToString()" />
        </Column>
        <Column ColumnSize="ColumnSize.Is12.Is6.OnDesktop.Is3.OnWidescreen" Margin="Margin.Is1.OnY">
            <DashboardInformationCard BgColor="bg-success"
                                      Heading="Pending Approval"
                                      Icon="@FontAwesomeIcons.UserCheck"
                                      Data="@Metrics.TotalPendingApproval.ToString()" />
        </Column>
        <Column ColumnSize="ColumnSize.Is12.Is6.OnDesktop.Is3.OnWidescreen" Margin="Margin.Is1.OnY">
            @* --- TODO --- *@
            <DashboardInformationCard BgColor="bg-primary"
                                      Heading="Awaiting Rekeying"
                                      Icon="@FontAwesomeIcons.Clock"
                                      Data="0" />
        </Column>
    </Row>

    @if (!Metrics.ExpiringSoon.Any())
    {
<Row Margin="Margin.Is4.OnY">
    <Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is0.OnX">
        <Paragraph Padding="Padding.Is2.OnY"
                   Color="TextColor.Success"
                   Alignment="TextAlignment.Center"
                   Class="border-top border-bottom">
            There are no secrets about to expire! 👍
        </Paragraph>
    </Column>
</Row> }
else
{
<Row Margin="Margin.Is4.OnY.Is2.OnX">
    <Column ColumnSize="ColumnSize.Is12">
        <Card>
            <CardHeader>
                Secrets Expiring Soon
            </CardHeader>
            <CardBody Padding="Padding.Is0">
                <BlazorTable.Table TableItem="ManagedSecretViewModel" Items="@Metrics.ExpiringSoon" TableClass="table p-0 m-0">
                    <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Name" Field="@(x => x.Name)" Sortable="true" />
                    <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Expiry" Field="@(x => x.Expiry)" Sortable="true" />
                    <BlazorTable.Column TableItem="ManagedSecretViewModel" Title="Risk Score" Field="@(x => x.Resources.Sum(r => r.RiskScore))" Sortable="true" />
                    <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
                </BlazorTable.Table>
            </CardBody>
        </Card>
    </Column>
</Row>}

    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Dashboard"
                                                    Icon="@FontAwesomeIcons.TachometerAlt"
                                                    @bind-Visible="@ContextualHelpVisible">
        <p>The AuthJanitor Dashboard shows a brief look at the most important parts of your key and secret management system.</p>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible" />

@using AuthJanitor.UI.Shared.ViewModels
@code { protected DashboardMetricsViewModel Metrics { get; set; } = new DashboardMetricsViewModel();
    
    protected bool ContextualHelpVisible { get; set; }

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData() => Metrics = await Http.AJGet<DashboardMetricsViewModel>();

    protected Blazorise.Charts.ChartData<int> GetRiskDataSet()
    {
        return new Blazorise.Charts.ChartData<int>()
        {
            Datasets = new List<Blazorise.Charts.ChartDataset<int>>()
{
new Blazorise.Charts.ChartDataset<int>()
{
Label = "Risks",
BackgroundColor = new List<string>() { "#1cc88a", "#858796", "#4e73df", "#f6c23e", "#e74a3b" },
BorderColor = new List<string>() { "#ccc", "#ccc", "#ccc", "#ccc", "#ccc" },
BorderWidth = 1,
Data = new List<int>()
{
Metrics.Risk0, Metrics.Risk35, Metrics.Risk60, Metrics.Risk85, Metrics.RiskOver85
}
}
            },
            Labels = new List<string>() { "0", "1-35", "36-60", "61-85", ">85" }
        };
    }
    protected Blazorise.Charts.ChartData<int> GetExpiryDataSet()
    {
        return new Blazorise.Charts.ChartData<int>()
        {
            Datasets = new List<Blazorise.Charts.ChartDataset<int>>()
{
new Blazorise.Charts.ChartDataset<int>()
{
Label = "Risks",
BackgroundColor = new List<string>() { "#1cc88a", "#f6c23e", "#e74a3b" },
BorderColor = new List<string>() { "#ccc", "#ccc", "#ccc" },
BorderWidth = 1,
Data = new List<int>()
{
Metrics.TotalSecrets - Metrics.TotalExpired - Metrics.TotalExpiringSoon,
Metrics.TotalExpiringSoon,
Metrics.TotalExpired
}
}
},
            Labels = new List<string>() { "Valid", "Expiring Soon", "Expired" }
        };
    } }
