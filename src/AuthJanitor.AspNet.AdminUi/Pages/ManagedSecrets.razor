@page "/managedSecrets"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="Manage"
                                             PageGroup="Secrets">
        <Column ColumnSize="ColumnSize.Is3" Margin="Margin.IsAuto.OnY" Padding="Padding.Is3.FromRight" Class="text-right">
            <Button Clicked="@(() => { CreateModalShowing = true; })">
                <Icon Name="@FontAwesomeIcons.Plus" Style="margin-right:-0.70em" />
                <Icon Name="@FontAwesomeIcons.Key" Margin="Margin.Is1.FromRight" />
                Manage New Secret
            </Button>
        </Column>
    </AuthJanitor.UI.Components.BreadcrumbRow>

    <Row>
        <Column Padding="Padding.Is0">
            <BlazorTable.Table TableItem="ManagedSecretViewModel"
                               TableClass="table table-striped table-hover"
                               @bind-Items="@Secrets">

                <!-- Controls/ID -->
                <BlazorTable.Column TableItem="ManagedSecretViewModel"
                                    Title="" Field="@(x => x.ObjectId)"
                                    Width="1%"
                                    Sortable="false" Filterable="false">
                    <Template>
                        <Blazorise.Buttons>
                            <Blazorise.Button Color="Color.Info"
                                              Clicked="@(() => NavigationManager.NavigateTo($"/managedSecrets/{context.ObjectId}"))">
                                <Icon Name="FontAwesomeIcons.Eye" Class="text-light" />
                            </Blazorise.Button>
                            <Blazorise.Button Color="Color.Danger" Clicked="@(() => { SelectedValue = context; DeleteModalShowing = true; })">
                                <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                            </Blazorise.Button>
                        </Blazorise.Buttons>
                    </Template>
                </BlazorTable.Column>

                <!-- Confirmations -->
                <BlazorTable.Column TableItem="ManagedSecretViewModel"
                                    Title="Confirmations" Field="@(x => x.TaskConfirmationStrategies)"
                                    Width="1%"
                                    Sortable="true" Filterable="true">
                    <Template>
                        <ApprovalTypeComponent @bind-Value="@context.TaskConfirmationStrategies" ShowEditControls="false" />
                    </Template>
                </BlazorTable.Column>

                <!-- Valid Period -->
                <BlazorTable.Column TableItem="ManagedSecretViewModel"
                                    Title="Valid For" Field="@(x => x.ValidPeriodMinutes)"
                                    Sortable="true">
                    <Template>
                        <TimespanComponent @bind-Value="@context.ValidPeriodMinutes" ShowEditControls="false" />
                    </Template>
                </BlazorTable.Column>

                <!-- Expiry -->
                <BlazorTable.Column TableItem="ManagedSecretViewModel"
                                    Title="Expiry" Field="@(x => x.Expiry)"
                                    Sortable="true" Filterable="true" />

                <!-- Resources -->
                <BlazorTable.Column TableItem="ManagedSecretViewModel"
                                    Title="Resources">
                    <Template>
                        <ListGroup Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">
                            @foreach (var resource in context.Resources)
                            {
                            <ListGroupItem Padding="Padding.Is1.OnAll" Class="justify-content-between align-items-center d-flex">
                                <div>
                                    <div style="width:1em;" class="mr-2 float-left">@((MarkupString)resource.Provider.Details.SvgImage)</div>
                                    @resource.Name
                                </div>
                                <ColoredRiskScore ShowRiskText="false" Value="@resource.RiskScore" />
                            </ListGroupItem>}
                        </ListGroup>
                    </Template>
                </BlazorTable.Column>

                <!-- Pager -->
                <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
            </BlazorTable.Table>
        </Column>
    </Row>
    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Secrets"
                                                    Icon="@FontAwesomeIcons.Key"
                                                    @bind-Visible="@ContextualHelpVisible">
        <p>
            <strong>Secrets</strong> are the combination of multiple <strong>Resources</strong> which work together to provide
            services to an application. A <strong>Secret</strong> typically consists of at least one Rekeyable Object Provider
            and one Application Lifecycle Provider, although a Rekeyable Object Provider can be a <strong>Secret</strong> by
            itself as well.
        </p>
        <p>
            A <strong>Secret</strong> has a <strong>Rekeying Confirmation</strong> mode, which represents how the rekeying is
            performed. With Administrator-oriented modes, a human administrator must authenticate to the AuthJanitor system and
            approve the rekeying. By doing this, an audit trail is created which leads to the human being who decided to approve
            the action.
        </p>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<DataModal @bind-Visible="@CreateModalShowing"
           Title="Create New Managed Secret"
           YesButton="Create"
           NoButton="Cancel"
           ResultClicked="@CreateCallback">
    <ManagedSecretEditor @bind-Value="@SelectedValue" />
</DataModal>
<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@SelectedValue.ObjectId"
                         ObjectName="@SelectedValue.Name"
                         ResultClicked="@DeleteConfirmCallback" />

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible"/>

@code
{ 
    protected IEnumerable<ManagedSecretViewModel> Secrets { get; set; } = new List<ManagedSecretViewModel>();

    protected bool CreateModalShowing { get; set; }
    protected bool DeleteModalShowing { get; set; }
    protected bool ContextualHelpVisible { get; set; }

    [Parameter]
    public ManagedSecretViewModel SelectedValue { get; set; } = new ManagedSecretViewModel();

    [Parameter]
    public EventCallback<ManagedSecretViewModel> SelectedValueChanged { get; set; }

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData()
    {
        Secrets = await Http.AJList<ManagedSecretViewModel>();
        await Task.WhenAll(Secrets.SelectMany(s => s.Resources).Distinct().Select(async resource =>
        {
            resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(resource.ProviderType);
            resource.ProviderConfiguration.SerializedConfiguration = resource.SerializedProviderConfiguration;
        }));
    }

    protected void CreateNew()
    {
        SelectedValue = new ManagedSecretViewModel();
        CreateModalShowing = true;
    }

    protected async Task CreateCallback(bool result)
    {
        if (result)
        {
            await Http.AJCreate<ManagedSecretViewModel>(SelectedValue);
            await LoadData();
        }
        CreateModalShowing = false;
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<ManagedSecretViewModel>(SelectedValue.ObjectId);
            await LoadData();
        }
        DeleteModalShowing = false;
    }
}
