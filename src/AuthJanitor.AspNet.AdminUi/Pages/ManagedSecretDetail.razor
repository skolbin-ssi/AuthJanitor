@page "/managedSecrets/{SecretId}"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="Manage"
                                             PageGroup="Secrets"
                                             PageGroupLink="/managedSecrets"
                                             OptionalObjectName="@Secret.Name" />

    <Row Class="border-bottom">
        <Column Padding="Padding.Is3" Class="bg-light">
            <DisplayHeading Size="DisplayHeadingSize.Is4">@Secret.Name</DisplayHeading>
            <Paragraph Class="lead" Margin="Margin.Is2.OnY">@Secret.Description</Paragraph>
        </Column>
    </Row>

    <Row Class="border-bottom">
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left bg-light">
            <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnY">
                Services Affected
            </Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is9.OnWidescreen" Padding="Padding.Is2" Class="border-left">
            @foreach (var item in this.Secret.Resources)
            {
                <div style="width:1em;" class="mr-3 float-left" title="@item.Name">@((MarkupString)item.Provider.Details.SvgImage)</div>
            }
        </Column>
    </Row>

    <Row Class="border-bottom">
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left bg-light">
            <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnY">
                Last Changed
            </Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left">
            <Paragraph Margin="Margin.IsAuto.OnY">
                @Secret.LastChanged
            </Paragraph>
        </Column>

        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left bg-light">
            <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnY">
                Expires
            </Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left">
            <Paragraph Margin="Margin.IsAuto.OnY">
                @Secret.Expiry
            </Paragraph>
        </Column>
    </Row>

    <Row Class="border-bottom">
        <Column Padding="Padding.Is0">
            <AuthJanitor.UI.Components.ColoredProgressBar Value="@Secret.ExpiryPercent" />
        </Column>
    </Row>

    <Row Padding="Padding.Is3.OnY" Class="shadow-sm bg-light">
        <Column ColumnSize="ColumnSize.Is6" Class="text-center">
            <Button Disabled="true" Color="Color.Info">
                <Icon Name="FontAwesomeIcons.Tasks" Margin="Margin.Is3.FromRight" />
                Create Rekeying Task
            </Button>
        </Column>
        <Column ColumnSize="ColumnSize.Is6" Class="text-center">
            <Button Color="Color.Danger" Clicked="@(() => { DeleteModalShowing = true; })">
                <Icon Name="FontAwesomeIcons.Trash" Margin="Margin.Is3.FromRight" />
                Delete Secret
            </Button>
        </Column>
    </Row>

    <Row Margin="Margin.Is2.OnY">
        @foreach (var resource in Secret.Resources)
        {
            <Column ColumnSize="ColumnSize.Is12.OnMobile.Is6.OnTablet.Is4.OnDesktop">
                <Card>
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3" Class="providerImage">
                                @((MarkupString)resource.Provider.Details.SvgImage)
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Heading Size="HeadingSize.Is3">
                                    @resource.Name
                                    <a href="@($"/resources/{resource.ObjectId}")" class="h6">
                                        <Icon Name="FontAwesomeIcons.Link" />
                                    </a>
                                </Heading>
                                <Paragraph Class="small">@resource.Description</Paragraph>
                            </Column>
                        </Row>
                        <Row>
                            <Column>
                                @resource.RuntimeDescription
                            </Column>
                        </Row>
                    </CardBody>
                    <CardFooter>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3" Margin="Margin.IsAuto.OnY" Class="text-left">
                                <AuthJanitor.UI.Components.ColoredRiskScore Value="@resource.RiskScore" ShowRiskText="true" />
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9" Class="text-right">
                                <AuthJanitor.UI.Components.ConfigurationTestButton Context="TestAsContexts.AsUser"
                                                                                   ProviderType="@resource.ProviderType"
                                                                                   ProviderConfiguration="@resource.ProviderConfiguration" />
                                <AuthJanitor.UI.Components.ConfigurationTestButton Context="TestAsContexts.AsApp"
                                                                                   ProviderType="@resource.ProviderType"
                                                                                   ProviderConfiguration="@resource.ProviderConfiguration" />
                            </Column>
                        </Row>
                    </CardFooter>
                </Card>
            </Column>
        }
    </Row>
    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Secrets"
                                                    Icon="@FontAwesomeIcons.Key"
                                                    @bind-Visible="@ContextualHelpVisible">
        <Paragraph>
            <strong>Secrets</strong> are the combination of multiple <strong>Resources</strong> which work together to provide
            services to an application. A <strong>Secret</strong> typically consists of at least one Rekeyable Object Provider
            and one Application Lifecycle Provider, although a Rekeyable Object Provider can be a <strong>Secret</strong> by
            itself as well.
        </Paragraph>
        <Paragraph>
            A <strong>Secret</strong> has a <strong>Rekeying Confirmation</strong> mode, which represents how the rekeying is
            performed. With Administrator-oriented modes, a human administrator must authenticate to the AuthJanitor system and
            approve the rekeying. By doing this, an audit trail is created which leads to the human being who decided to approve
            the action.
        </Paragraph>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@Secret.ObjectId"
                         ObjectName="@Secret.Name"
                         ResultClicked="@DeleteConfirmCallback" />

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible" />

@code {
    public ManagedSecretViewModel Secret { get; set; } = new ManagedSecretViewModel();

    protected bool CreateModalShowing { get; set; }
    protected bool DeleteModalShowing { get; set; }
    protected bool ContextualHelpVisible { get; set; }

    [Parameter]
    public string SecretId { get; set; }

    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();
    protected IEnumerable<LoadedProviderViewModel> _providers;

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData()
    {
        _providers = await Http.AJList<LoadedProviderViewModel>();
        Secret = await Http.AJGet<ManagedSecretViewModel>(Guid.Parse(SecretId));
        await Task.WhenAll(Secret.Resources.Select(async resource =>
        {
            resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(resource.ProviderType);
            resource.ProviderConfiguration.SerializedConfiguration = resource.SerializedProviderConfiguration;
        }));
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<ManagedSecretViewModel>(Secret.ObjectId);
            NavigationManager.NavigateTo("/managedSecrets");
        }
        DeleteModalShowing = false;
    }
}
