@page "/rekeyingTasks"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="Manage"
                                             PageGroup="Rekeying Tasks" />

    <Row>
        <Column Padding="Padding.Is0">
            <BlazorTable.Table TableItem="RekeyingTaskViewModel"
                               TableClass="table table-striped table-hover"
                               @bind-Items="@Tasks">

                <!-- Controls/ID -->
                <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                                    Title="" Field="@(x => x.ObjectId)"
                                    Width="1%"
                                    Sortable="false" Filterable="false">
                    <Template>
                        <Blazorise.Buttons>
                            <Blazorise.Button Color="Color.Info"
                                              Clicked="@(() => NavigationManager.NavigateTo($"/rekeyingTasks/{context.ObjectId}"))">
                                <Icon Name="FontAwesomeIcons.Eye" Class="text-light" />
                            </Blazorise.Button>
                            <Blazorise.Button Color="Color.Success" Clicked="@(() => { SelectedValue = context; ApproveModalShowing = true; })">
                                <Icon Name="FontAwesomeIcons.CheckSquare" Class="text-light" />
                            </Blazorise.Button>
                            <Blazorise.Button Color="Color.Danger" Clicked="@(() => { SelectedValue = context; DeleteModalShowing = true; })">
                                <Icon Name="FontAwesomeIcons.Trash" Class="text-light" />
                            </Blazorise.Button>
                        </Blazorise.Buttons>
                    </Template>
                </BlazorTable.Column>

                <!-- Queued Date -->
                <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                                    Title="Queued" Field="@(x => x.Queued)"
                                    Sortable="true" Filterable="true" />

                <!-- Expiry Date -->
                <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                                    Title="Expiry" Field="@(x => x.Expiry)"
                                    Sortable="true" Filterable="true" />

                <!-- Status -->
                <BlazorTable.Column TableItem="RekeyingTaskViewModel"
                                    Title="Status" Field="@(x => x.RekeyingCompleted)">
                    <Template>
                        @if (context.RekeyingCompleted)
                        {
                            <Badge Color="Color.Success">Complete</Badge>
                        }
                        else if (!string.IsNullOrEmpty(context.RekeyingErrorMessage))
                        {
                            var attempt = context.Attempts.OrderByDescending(a => a.StartedExecution).First();
                            <Alert Color="Color.Danger" Dismisable="false" Visible="true">
                                <strong>Error Rekeying!</strong> (Last attempted @attempt.StartedExecution by @attempt.Actions.First().ContextUserName)
                            </Alert>
                        }
                        else if (context.RekeyingInProgress)
                        {
                            <Badge Color="Color.Primary">In Progress</Badge>
                        }
                        else
                        {
                            <Badge Color="Color.Secondary">Scheduled</Badge>
                        }
                    </Template>
                </BlazorTable.Column>

                <!-- Participating Resources -->
                <BlazorTable.Column TableItem="RekeyingTaskViewModel" Title="Resources">
                    <Template>
                        <ListGroup Margin="Margin.Is0.OnAll" Padding="Padding.Is0.OnAll">
                            @foreach (var resource in context.ManagedSecret.Resources)
                            {
                                <ListGroupItem Padding="Padding.Is1.OnAll" Class="justify-content-between align-items-center d-flex">
                                    <div>
                                        <div style="width:1em;" class="mr-2 float-left">@((MarkupString)resource.Provider.Details.SvgImage)</div>
                                        @resource.Name
                                    </div>
                                    <ColoredRiskScore ShowRiskText="false" Value="@resource.RiskScore" />
                                </ListGroupItem>}
                        </ListGroup>
                    </Template>
                </BlazorTable.Column>

                <!-- Pager -->
                <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
            </BlazorTable.Table>
        </Column>
    </Row>

    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Rekeying Tasks"
                                                    Icon="@FontAwesomeIcons.Tasks"
                                                    @bind-Visible="@ContextualHelpVisible">
        <Paragraph>
            <strong>Rekeying Tasks</strong> are created, either automatically by the system as a key or secret nears its expiry,
            or manually by an administrator. A <strong>Rekeying Task</strong> is associated with a <em>single</em>
            <strong>Secret</strong>. <strong>Rekeying Tasks</strong> can have multiple attempts by different administrators
            or service accounts.
        </Paragraph>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<DataModal @bind-Visible="@ApproveModalShowing"
           Title="Approve Task"
           YesButton="Approve"
           NoButton="Cancel"
           ResultClicked="@ApproveCallback">
    <ApprovalSummary Task="@SelectedValue" />
</DataModal>
<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@SelectedValue.ObjectId"
                         ObjectName="@SelectedValue.ObjectId.ToString()"
                         ResultClicked="@DeleteConfirmCallback" />

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible"/>

@using AuthJanitor.UI.Modals
@using AuthJanitor.UI.Shared.ViewModels
@code {
    protected IEnumerable<RekeyingTaskViewModel> Tasks { get; set; } = new List<RekeyingTaskViewModel>();

    protected bool ApproveModalShowing { get; set; }
    protected bool DeleteModalShowing { get; set; }
    protected bool ContextualHelpVisible { get; set; }

    [Parameter]
    public RekeyingTaskViewModel SelectedValue { get; set; } = new RekeyingTaskViewModel();

    [Parameter]
    public EventCallback<RekeyingTaskViewModel> SelectedValueChanged { get; set; }

    protected override async Task OnInitializedAsync() => await LoadData();

    protected async Task LoadData() => Tasks = await Http.AJList<RekeyingTaskViewModel>();

    protected async Task ApproveCallback(bool result)
    {
        if (result)
        {
            await Http.PostAsync($"/api/tasks/{SelectedValue.ObjectId}/approve", new StringContent(string.Empty));
            await LoadData();
        }
        ApproveModalShowing = false;
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<RekeyingTaskViewModel>(SelectedValue.ObjectId);
            await LoadData();
        }
        DeleteModalShowing = false;
    }
}
