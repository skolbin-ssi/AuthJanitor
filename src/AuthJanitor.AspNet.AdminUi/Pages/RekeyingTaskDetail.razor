@page "/rekeyingTasks/{RekeyingTaskId}"

<Container Fluid="true" Style="position:relative;">
    <AuthJanitor.UI.Components.BreadcrumbRow Category="Manage"
                                             PageGroup="Rekeying Tasks"
                                             PageGroupLink="/rekeyingTasks"
                                             OptionalObjectName="@Task.ManagedSecret.Name" />
    <Row Margin="Margin.Is2.OnY">
        <Column Class="text-center d-flex align-items-center justify-content-center">
            <TaskProgressionComponent Attempt="@Attempt" />
        </Column>
    </Row>
    <Row Padding="Padding.Is2.FromBottom" Class="border-bottom">
        <Column Class="text-center">
            <DisplayHeading Size="DisplayHeadingSize.Is4">
                @Task.ManagedSecret.Name
                <a href="@($"/managedSecrets/{Task.ManagedSecret.ObjectId}")" class="h5">
                    <Icon Name="FontAwesomeIcons.Link" />
                </a>
            </DisplayHeading>
        </Column>
    </Row>

    <Row Class="border-bottom">
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left bg-light">
            <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnY">Last Changed</Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left">
            <Paragraph Margin="Margin.IsAuto.OnY">@Task.ManagedSecret.LastChanged</Paragraph>
        </Column>

        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left bg-light">
            <Heading Size="HeadingSize.Is5" Margin="Margin.IsAuto.OnY">Expires</Heading>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.Is3.OnWidescreen" Padding="Padding.Is2" Class="border-left">
            <Paragraph Margin="Margin.IsAuto.OnY">@Task.Expiry</Paragraph>
        </Column>
    </Row>

    <Row Class="border-bottom">
        <Column Padding="Padding.Is0">
            <AuthJanitor.UI.Components.ColoredProgressBar Value="@Task.ManagedSecret.ExpiryPercent" />
        </Column>
    </Row>

    <Row Padding="Padding.Is3.OnY" Class="shadow-sm bg-light">
        <Column ColumnSize="ColumnSize.Is6" Class="text-center">
            <Button Color="Color.Success" Clicked="@(() => { ApproveModalShowing = true; })">
                <Icon Name="FontAwesomeIcons.Check" Margin="Margin.Is3.FromRight" />
                Approve Rekeying Task
            </Button>
        </Column>
        <Column ColumnSize="ColumnSize.Is6" Class="text-center">
            <Button Color="Color.Danger" Clicked="@(() => { DeleteModalShowing = true; })">
                <Icon Name="FontAwesomeIcons.Trash" Margin="Margin.Is3.FromRight" />
                Delete Rekeying Task
            </Button>
        </Column>
    </Row>

    @if (Task.Attempts.Any())
    {
    <Row Margin="Margin.Is3.FromTop">
        <Column ColumnSize="ColumnSize.Is12">
            <Tabs SelectedTab="@SelectedAttemptTab" SelectedTabChanged="@OnSelectedTabChanged">
                <Items>
                    @foreach (var attempt in Task.Attempts)
                        {
                    <Tab Name="@attempt.StartedExecution.ToString()">
                        @if (attempt.HasBeenExecuted && attempt.HasBeenExecutedSuccessfully)
                                {
                        <Icon Name="FontAwesomeIcons.CheckCircle" Class="text-success" Margin="Margin.IsAuto.OnY.Is1.FromRight" />
                                }
                        else if (attempt.HasBeenExecuted && !attempt.HasBeenExecutedSuccessfully)
                                {
                        <Icon Name="FontAwesomeIcons.TimesCircle" Class="text-danger" Margin="Margin.IsAuto.OnY.Is1.FromRight" />
                                }
                        else
                                {
                        <Icon Name="FontAwesomeIcons.PlayCircle" Class="text-info" Margin="Margin.IsAuto.OnY.Is1.FromRight" />
                                }
                        <small>@attempt.StartedExecution.ToString()</small>
                    </Tab>
                        }
                </Items>
                <Content>
                    @foreach (var attempt in Task.Attempts)
                        {
                    <TabPanel Name="@attempt.StartedExecution.ToString()">
                        <RekeyingTaskAttemptAccordion Action="@attempt" Secret="@Secret" />
                        <pre class="border-dark bg-gradient-light"><code>@attempt.OrchestrationLog</code></pre>
                    </TabPanel>
                        }
                </Content>
            </Tabs>
        </Column>
    </Row>
    }

    <AuthJanitor.UI.Components.HelpSlideInComponent Title="Rekeying Tasks"
                                                    Icon="@FontAwesomeIcons.Tasks"
                                                    @bind-Visible="@ContextualHelpVisible">
        <Paragraph>
            <strong>Rekeying Tasks</strong> are created, either automatically by the system as a key or secret nears its expiry,
            or manually by an administrator. A <strong>Rekeying Task</strong> is associated with a <em>single</em>
            <strong>Secret</strong>. <strong>Rekeying Tasks</strong> can have multiple attempts by different administrators
            or service accounts.
        </Paragraph>
    </AuthJanitor.UI.Components.HelpSlideInComponent>
</Container>

<DataModal @bind-Visible="@ApproveModalShowing"
           Title="Approve Task"
           YesButton="Approve"
           NoButton="Cancel"
           ResultClicked="@ApproveCallback">
    <ApprovalSummary Task="@Task" />
</DataModal>
<DeleteConfirmationModal @bind-Visible="@DeleteModalShowing"
                         ObjectId="@Task.ObjectId"
                         ObjectName="@Task.ObjectId.ToString()"
                         ResultClicked="@DeleteConfirmCallback" />

<SystemWideFooter RefreshDataClicked="@(() => LoadData())"
                  @bind-ContextualHelpVisible="@ContextualHelpVisible" />

@using AuthJanitor.UI.Shared.ViewModels
@code {
    public ManagedSecretViewModel Secret => Task == null ? new ManagedSecretViewModel() : Task.ManagedSecret;
    public RekeyingTaskViewModel Task { get; set; } = new RekeyingTaskViewModel();

    protected bool ApproveModalShowing { get; set; }
    protected bool DeleteModalShowing { get; set; }
    public bool ContextualHelpVisible { get; set; }

    public ProviderWorkflowActionCollection Attempt { get; set; }

    [Parameter]
    public string RekeyingTaskId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected async Task LoadData()
    {
        Task = await Http.AJGet<RekeyingTaskViewModel>(Guid.Parse(RekeyingTaskId));
        if (Task.Attempts.Any())
        {
            SelectedAttemptTab = Task.Attempts.OrderByDescending(a => a.StartedExecution).FirstOrDefault()?.StartedExecution.ToString();
            Attempt = Task.Attempts.OrderByDescending(a => a.FinishedExecution).FirstOrDefault();
        }

        //await System.Threading.Tasks.Task.WhenAll(Task.ManagedSecret.Resources.Select(async resource =>
        //{
        //    resource.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(resource.ProviderType);
        //    resource.ProviderConfiguration.SerializedConfiguration = resource.SerializedProviderConfiguration;
        //}));
    }

    string SelectedAttemptTab;
    private void OnSelectedTabChanged(string name)
    {
        SelectedAttemptTab = name;
        Attempt = Task.Attempts.FirstOrDefault(a => a.StartedExecution.ToString() == name);
        StateHasChanged();
    }

    protected async Task ApproveCallback(bool result)
    {
        if (result)
        {
            await Http.PostAsync($"/api/tasks/{Task.ObjectId}/approve", new StringContent(string.Empty));
            await LoadData();
        }
        ApproveModalShowing = false;
    }

    protected async Task DeleteConfirmCallback(bool result)
    {
        if (result)
        {
            await Http.AJDelete<RekeyingTaskViewModel>(Task.ObjectId);
            NavigationManager.NavigateTo("/rekeyingTasks");
        }
        DeleteModalShowing = false;
    }
}