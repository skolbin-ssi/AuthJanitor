@{ 
    void RenderCapabilityIcon(string icon, string templateString, bool isLit)
    {
        <Icon Name="@icon" 
              Class="@(isLit ? IconLitColor : IconUnlitColor)"
              title="@GetTitle(templateString, isLit)"
              Margin="Margin.Is2"></Icon>
    }
    
    RenderCapabilityIcon(
        icon: FontAwesomeIcons.Flask,
        templateString: "Provider {0} running sanity tests",
        isLit: HasCapabilities(ProviderCapabilities.CanRunSanityTests));

    RenderCapabilityIcon(
        icon: FontAwesomeIcons.SyncAlt,
        templateString: "Provider {0} generating/consuming interim secret values",
        isLit: HasCapabilitiesOr(ProviderCapabilities.CanDistributeTemporarySecrets,
                                 ProviderCapabilities.CanGenerateTemporarySecrets));

    RenderCapabilityIcon(
        icon: FontAwesomeIcons.LayerGroup,
        templateString: "Provider {0} resource candidate selection for configuration",
        isLit: HasCapabilities(ProviderCapabilities.CanEnumerateResourceCandidates));
}

@code {
    [Parameter]
    public LoadedProviderViewModel Provider { get; set; }

    [Parameter]
    public string IconLitColor { get; set; } = "text-success";
    
    [Parameter]
    public string IconUnlitColor { get; set; } = "text-dark";

    private const string SUPPORTS = "supports";
    private const string DOES_NOT_SUPPORT = "does not support";

    private static string GetTitle(string templateString, bool isLit) =>
        string.Format(templateString, isLit ? SUPPORTS : DOES_NOT_SUPPORT);

    private bool HasCapabilities(params ProviderCapabilities[] capabilities) =>
        !capabilities.Except(Provider.Capabilities).Any();

    private bool HasCapabilitiesOr(params ProviderCapabilities[] capabilities) =>
        Provider.Capabilities.Any(c => capabilities.Contains(c));
}