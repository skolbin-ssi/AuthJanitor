<Accordion>
    @foreach (var action in Action.Actions)
    {
        var bgColor = "";
        if (action.HasCompleted && action.HasSucceeded)
            bgColor = "border-left-success";
        else if (action.HasCompleted && !action.HasSucceeded)
            bgColor = "border-left-danger";
        else if (action.HasStarted)
            bgColor = "border-left-info";
        else bgColor = "border-left-dark";

        <Collapse Class="@bgColor" Visible="@_actionVisibilities.GetValueOrDefault(Action.Actions.ToList().IndexOf(action), false)">
            <CollapseHeader Padding="Padding.Is0">
                <Heading Size="HeadingSize.Is5">
                    <span class="float-left m-1 ml-2 px-2 py-1 h5 text-gray-700 text-inset border rounded-circle border-dark">@action.ExecutionOrder</span>
                    @{ 
                        var isDimmed = "text-gray-500";
                    }
                    <Button Class="@(action.Start.Year < 10 ? isDimmed : string.Empty)"
                            Clicked="@(() => _actionVisibilities[Action.Actions.ToList().IndexOf(action)] = !_actionVisibilities.GetValueOrDefault(Action.Actions.ToList().IndexOf(action), false))">
                        @if (_providers != null && _providers.Any(p => p.ProviderTypeName == action.ProviderType))
                        {
                            <span class="float-left ml-1 mr-2" style="width:1em;" title="@action.ProviderType">
                                @((MarkupString)_providers.FirstOrDefault(p => p.ProviderTypeName == action.ProviderType)?.Details.SvgImage)
                            </span>
                        }
                        @action.Name
                    </Button>
                    <span class="float-right small mt-2 mr-2">
                        @if (action.End.Year > 10)
                        {
                            @(Math.Round((action.End - action.Start).TotalSeconds, 2) + "sec")
                        }
                        else if (action.Start.Year > 10)
                        {
                            @(Math.Round((DateTimeOffset.UtcNow - action.Start).TotalSeconds, 2) + "sec")
                        }
                    </span>
                </Heading>
            </CollapseHeader>
            <CollapseBody Margin="Margin.Is0" Padding="Padding.Is0">
                <p class="text-gray-700 small m-0">@action.Start.ToString("d") &middot; @action.Start.ToString("T") - @action.End.ToString("T")</p>
                <pre class="m-0 p-0"><code>@action.Log</code></pre>
                @if (!string.IsNullOrEmpty(action.Exception))
                {
                <div class="mt-2 alert alert-danger" role="alert">
                    <h4 class="text-danger">
                        Exception thrown!
                    </h4>
                    <p>
                        <pre><code>@action.Exception</code></pre>
                    </p>
                </div>
                }
            </CollapseBody>
        </Collapse>
    }
</Accordion>

@code {
    Dictionary<int, bool> _actionVisibilities = new Dictionary<int, bool>();
    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();
    protected IEnumerable<LoadedProviderViewModel> _providers;

    [Parameter]
    public ManagedSecretViewModel Secret { get; set; }

    [Parameter]
    public ProviderWorkflowActionCollection Action { get; set; }

    protected override async Task OnInitializedAsync() =>
        _providers = await Http.AJList<LoadedProviderViewModel>();
} 