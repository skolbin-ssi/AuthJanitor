<button @onclick="@ButtonClicked" class="btn @ButtonColor" title="@LastMessage">
    <span class="fa-layers fa-fw mr-3">
        <span class="collapse">
            <i class="fa fa-spinner fa-inverse fa-pulse fa-2x"></i>
        </span>
        <i class="@Icon" data-fa-transform="shrink-3 right-6"></i>
    </span>
    <span class="d-none d-xl-inline">@Text</span>
</button>

@using System.Text.Json
@code {
    [Parameter]
    public TestAsContexts Context { get; set; }

    [Parameter]
    public string ProviderType { get; set; }

    [Parameter]
    public ProviderConfigurationViewModel ProviderConfiguration { get; set; }

    [Parameter]
    public string DefaultColor { get; set; } = "btn-secondary";

    protected string ButtonColor { get; set; }
    protected string IsCollapsed { get; set; } = "collapse";
    protected string LastMessage { get; set; } = string.Empty;

    protected string Icon => Context switch
    {
        TestAsContexts.AsApp => "fa fa-robot",
        TestAsContexts.AsUser => "fa fa-user",
        _ => "fa fa-question"
    };

    protected string Text => Context switch
    {
        TestAsContexts.AsApp => "Test as App",
        TestAsContexts.AsUser => "Test as User",
        _ => "?? Context ??"
    };

    protected async Task ButtonClicked()
    {
        IsCollapsed = string.Empty;
        ButtonColor = "btn-warning";

        StateHasChanged();

        try
        {
            var result = await Http.PostAsync($"{Http.BaseAddress}/providers/{ProviderType}/test/{Context.ToString()}",
                new System.Net.Http.StringContent(ProviderConfiguration.SerializedConfiguration));
            if (result.IsSuccessStatusCode)
            {
                LastMessage = "Success!";
                ButtonColor = "btn-success";
            }
            else
            {
                var messageStructure = JsonSerializer.Deserialize<Dictionary<string, string>>(
                    await result.Content.ReadAsStringAsync());
                LastMessage = messageStructure["Message"];
                ButtonColor = "btn-danger";
            }
        }
        catch (Exception ex)
        {
            LastMessage = ex.Message;
            ButtonColor = "btn-danger";
        }

        IsCollapsed = "collapse";
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ButtonColor = DefaultColor;
    }
}
