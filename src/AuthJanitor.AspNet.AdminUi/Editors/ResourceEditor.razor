<Container>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Name</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8">
                <TextEdit @bind-Text="@Value.Name" Placeholder="Resource name..." />
            </FieldBody>
        </Field>
    </Row>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Description</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8">
                <TextEdit @bind-Text="@Value.Description" Placeholder="Resource description..." />
            </FieldBody>
        </Field>
    </Row>
    <Row>
        <Field IsHorizontal="true" ColumnSize="ColumnSize.Is12">
            <FieldLabel ColumnSize="ColumnSize.Is4">Provider</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is8">
                <ProviderSelector Value="@Value.ProviderType" ValueChanged="ProviderTypeChanged" />
            </FieldBody>
        </Field>
    </Row>
</Container>
@if (Value.ProviderConfiguration != null &&
    Value.ProviderConfiguration.ConfigurationItems != null &&
    Value.ProviderConfiguration.ConfigurationItems.Any())
{
    <Container Class="hasSectionHeader">
        <span class="sectionHeader">Provider Settings</span>
        <Row>
            <ConfigurationVisualizer @bind-Value="@Value.ProviderConfiguration"
                                      ShowEditControls="true" />
        </Row>
    </Container>

    <Row Margin="Margin.Is2.FromTop" Padding="Padding.Is2.FromTop" Class="border-top">
        <Paragraph Class="small"
                   Alignment="TextAlignment.Center" 
                   Margin="Margin.Is5.OnX" 
                   Padding="Padding.Is2.OnY">Use the buttons below to test the configuration in the context of either the current user or the AuthJanitor application.
        </Paragraph>
        <Column ColumnSize="ColumnSize.Is6" Class="text-center">
            <ConfigurationTestButton ProviderType="@Value.ProviderType"
                                     ProviderConfiguration="@Value.ProviderConfiguration"
                                     DefaultColor="Color.Secondary"
                                     Context="TestAsContexts.AsUser" />
        </Column>
        <Column ColumnSize="ColumnSize.Is6" Class="text-center">
            <ConfigurationTestButton ProviderType="@Value.ProviderType"
                                     ProviderConfiguration="@Value.ProviderConfiguration"
                                     DefaultColor="Color.Secondary"
                                     Context="TestAsContexts.AsApp" />
        </Column>
    </Row>
}

@code {
    [Parameter]
    public ResourceViewModel Value { get; set; } = new ResourceViewModel();

    [Parameter]
    public EventCallback<ResourceViewModel> ValueChanged { get; set; }

    protected async Task ProviderTypeChanged(string providerType)
    {
        Value.ProviderType = providerType;
        Value.ProviderConfiguration = await Http.AJGet<ProviderConfigurationViewModel>(providerType);
    }
}